#! /usr/bin/env node
const path = require('path')
const fs = require('fs-extra')
const sol = require('./index.js')

var projectName = ""
var projectDir = ""

function usage() {
  let script = "./" + path.basename(__filename)
  console.log(
`
用法: 
 %s dir contract_name

说明：
 在dir目录下创建一个名叫contract_name的合约，并进行编译及部署。
 如果dir目录下已经包含了对应的合约文件(.sol)，则不会进行创建。
 目录结构如下：
  dir
   |-contracts
   |    |- contract_name.sol
   |-build


比如:
 %s /tmp/mycontract contract1
 表示在/tmp/mycontract目录下创建一个名叫contract1的合约，并进行编译和部署
`,
  script, script
  );
}

usage()

if (process.argv.length > 3) {
  projectDir = process.argv[2]
  projectName = process.argv[3]
} else {
  process.exit(1)
}

let p1 = Promise.resolve()
/*p1.then(function() {
  let contractPath = path.join(projectDir, "contracts", projectName + ".sol")
  if(fs.existsSync(contractPath)) {
    return true
  } else {
    return new Promise(function(resolve, reject) {
      try{
        fs.mkdirpSync(projectDir)
      } catch(e) {
        return reject(e)
      }
      sol.init(projectName, projectDir, function(err) {
        if(err) return reject(err)
        console.log("在目录", projectDir, "创建项目", projectName, "成功")
        projectDir = path.join(projectDir, projectName)
        return resolve()
      }) 
    })
  }
}).*/p1.then(function() {
  return new Promise(function(resolve, reject) {
    let opts = sol.compileOpts()
    opts.contracts_directory = path.join(projectDir, "contracts")
    opts.contracts_build_directory = path.join(projectDir, "build")
    // console.log(">>>>编译选项：", opts)
    sol.compile(opts, function (err) {
      if (err) {
        console.log("编译出错!", err)
        reject(err)
      }
      console.log("编译成功!")
      resolve(opts)
    })
  })
}).then(function(compileOpts) {
  return new Promise(function(resolve, reject) {
    let opts = sol.deployOpts()
    opts.contracts_build_directory = path.join(projectDir, "build")
    opts.contract_name = projectName
    let owner = '0xf3cc9ed32f425c3c3202539f400f5a5efc14d5cc'
    let ownerPrivateKey = 'BE9734E65C680C11AB038A65B2CE0433E5294F4B5AF10B538EC8AB6A78238C33'
    sol.deploy(owner, ownerPrivateKey, opts, function(err) {
      if(err) {
        console.log("部署失败!", err)
        return reject(err)
      }
      console.log("部署成功")
      resolve({compileOpts, "deployOpts": opts})
    })
 }) 
}).then(function({compileOpts, deployOpts}) {
  return new Promise(function(resolve, reject) {
    let file = path.join(projectDir, "build", projectName + ".json")
    let contracts_dir = path.dirname(file)
    sol.verifyContract(file, contracts_dir, false, true, function(err, result) {
      if(err) {
        console.log("生成认证数据失败!", err)
        return reject(err)
      }
      console.log("认证合约所需数据:")
      Object.keys(result).map((elem) =>
        console.log("%s :\n%s\n", elem, result[elem])
      )
    })
  })
}).then(function() {
  console.log("创建、编译、部署完成!")
}).catch(function(err){
  console.log("任务失败!", err)
})